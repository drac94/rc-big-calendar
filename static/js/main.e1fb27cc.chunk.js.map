{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["props","renderDay","previousButton","nextButton","onMonthChange","isMobile","headerDateFormat","borderColor","dayNameColor","headerColor","today","useState","currentMonth","setCurrentMonth","monthStart","startOfMonth","monthEnd","endOfMonth","startDate","startOfWeek","endDate","endOfWeek","Days","days","day","className","styles","style","key","isSameDay","isWithinRange","format","addDays","rows","Math","differenceInDays","gridTemplateRows","DayNames","color","index","monthChangeCallback","onClick","subMonths","addMonths","App","src","href","class","isSelected","isInMonth","height","boxSizing","padding","border","getDate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1fb27cc.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport styles from './styles.module.css'\nimport {\n  addDays,\n  addMonths,\n  subMonths,\n  isWithinRange,\n  format,\n  isSameDay,\n  differenceInDays,\n  startOfMonth,\n  endOfMonth,\n  startOfWeek,\n  endOfWeek\n} from 'date-fns'\n\nconst Calendar = (props) => {\n  const {\n    renderDay,\n    previousButton,\n    nextButton,\n    onMonthChange,\n    isMobile = false,\n    headerDateFormat = 'MMMM YYYY',\n    borderColor = '#dadce0',\n    dayNameColor = '#70757a',\n    headerColor = '#3c4043'\n  } = props\n  const today = new Date()\n  const [currentMonth, setCurrentMonth] = useState(new Date())\n\n  const enabledDayDateFormat = 'D'\n  const disabledDayDateFormat = 'MMM D'\n\n  const monthStart = startOfMonth(currentMonth)\n  const monthEnd = endOfMonth(monthStart)\n  const startDate = startOfWeek(monthStart)\n  const endDate = endOfWeek(monthEnd)\n\n  const Days = ({ renderDay }) => {\n    const days = []\n    let day = startDate\n\n    const getDayNumber = () =>\n      isWithinRange(day, monthStart, monthEnd)\n        ? format(day, enabledDayDateFormat)\n        : format(day, disabledDayDateFormat)\n\n    while (day <= endDate) {\n      days.push(\n        <div\n          className={isMobile ? styles.dayMobile : styles.day}\n          style={{ borderColor: borderColor }}\n          key={day}\n        >\n          {renderDay ? (\n            renderDay(\n              day,\n              startDate,\n              endDate,\n              isSameDay(day, today),\n              isWithinRange(day, monthStart, monthEnd)\n            )\n          ) : (\n            <React.Fragment>\n              <div className={styles.dayNumberWrapper}>\n                <div\n                  className={\n                    isSameDay(day, today)\n                      ? `${styles.dayNumber} ${styles.selected}`\n                      : styles.dayNumber\n                  }\n                >\n                  {getDayNumber()}\n                </div>\n              </div>\n            </React.Fragment>\n          )}\n        </div>\n      )\n      day = addDays(day, 1)\n    }\n    const rows = Math.ceil(differenceInDays(endDate, startDate) / 7)\n    return (\n      <div\n        className={isMobile ? styles.daysWrapperMobile : styles.daysWrapper}\n        style={{ gridTemplateRows: `repeat(${rows}, minmax(0, 1fr))` }}\n      >\n        {days}\n      </div>\n    )\n  }\n\n  const DayNames = () => {\n    const days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']\n    return (\n      <div\n        className={\n          isMobile ? styles.dayNamesWrapperMobile : styles.dayNamesWrapper\n        }\n        style={{ borderColor: borderColor }}\n      >\n        {days.map((value, index) => (\n          <div\n            className={styles.dayName}\n            style={{ borderColor: borderColor, color: dayNameColor }}\n            key={index}\n          >\n            {value}\n          </div>\n        ))}\n      </div>\n    )\n  }\n\n  const nextMonth = () => {\n    setCurrentMonth(addMonths(currentMonth, 1))\n    onMonthChange && monthChangeCallback(addMonths(currentMonth, 1))\n  }\n\n  const prevMonth = () => {\n    setCurrentMonth(subMonths(currentMonth, 1))\n    onMonthChange && monthChangeCallback(subMonths(currentMonth, 1))\n  }\n\n  const monthChangeCallback = (currentMonth) => {\n    onMonthChange(currentMonth, startDate, endDate)\n  }\n\n  return (\n    <div\n      className={isMobile ? styles.containerMobile : styles.container}\n      style={{ borderColor: borderColor }}\n    >\n      <div\n        className={isMobile ? styles.headerMobile : styles.header}\n        style={{ borderColor: borderColor }}\n      >\n        <div className={styles.navButtonLeft} onClick={() => prevMonth()}>\n          {previousButton || '<'}\n        </div>\n        <div\n          className={\n            isMobile ? styles.navButtonRightMobile : styles.navButtonRight\n          }\n          onClick={() => nextMonth()}\n        >\n          {nextButton || '>'}\n        </div>\n        <div\n          className={isMobile ? styles.monthMobile : styles.month}\n          style={{ color: headerColor }}\n        >\n          {format(currentMonth, headerDateFormat)}\n        </div>\n      </div>\n      <DayNames />\n      <Days renderDay={renderDay} />\n    </div>\n  )\n}\n\nexport default Calendar\n","import React from 'react'\n\nimport Calendar from 'rc-big-calendar'\nimport 'rc-big-calendar/dist/index.css'\n\nconst App = () => {\n  const customRender = (day, startDate, endDate, isSelected, isInMonth) => {\n    if (isInMonth) {\n      return (\n        <div\n          style={{\n            height: '100%',\n            boxSizing: 'border-box',\n            padding: '4px',\n            border: `${isSelected ? '1px solid blue' : 'none'}`\n          }}\n        >\n          {day.getDate()}\n        </div>\n      )\n    }\n  }\n  return (\n    <div className='main'>\n      <h1>React Big Calendar</h1>\n      <div className='badges'>\n        <img src='https://img.shields.io/npm/v/rc-big-calendar.svg' />\n        <img src='https://img.shields.io/badge/code_style-standard-brightgreen.svg' />\n        <img src='https://img.shields.io/badge/license-MIT-brightgreen.svg' />\n        <img src='https://img.shields.io/npm/dt/rc-big-calendar.svg' />\n        <img src='https://img.shields.io/npm/dw/rc-big-calendar.svg' />\n      </div>\n      <p>\n        <a href='https://github.com/drac94/rc-big-calendar'>\n          View documentation on GitHub\n        </a>\n      </p>\n      <h2>Default</h2>\n      <div class='example-wrapper'>\n        <div class='calendar-wrapper-1'>\n          <Calendar />\n        </div>\n        <code>\n          {`\nimport React from 'react'\nimport Calendar from 'rc-big-calendar'\n\nconst App = () => <Calendar />\n        `}\n        </code>\n      </div>\n      <h2>Custom Colors</h2>\n      <div class='example-wrapper'>\n        <code>\n          {`\nimport React from 'react'\nimport Calendar from 'rc-big-calendar'\n\nconst App = () => {\n  return (<Calendar\n    borderColor='red'\n      previousButton='ðŸ‘ˆ'\n      nextButton='ðŸ‘‰'\n      headerColor='red'\n      headerDateFormat='MMM YY'\n    }}\n  />)\n}\n        `}\n        </code>\n        <div class='calendar-wrapper-1'>\n          <Calendar\n            borderColor='red'\n            previousButton='ðŸ‘ˆ'\n            nextButton='ðŸ‘‰'\n            headerColor='red'\n            headerDateFormat='MMM YY'\n          />\n        </div>\n      </div>\n      <h2>Custom Day Render</h2>\n      <div class='example-wrapper'>\n        <div class='calendar-wrapper-1'>\n          <Calendar renderDay={customRender} />\n        </div>\n        <code>\n          {`\nimport React from 'react'\nimport Calendar from 'rc-big-calendar'\n\nconst App = () => {\n  const customRender = (\n    day, \n    startDate, \n    endDate, \n    isSelected, \n    isInMonth) => {\n    if (isInMonth) {\n      return (\n        <div\n          style={{\n            height: '100%',\n            boxSizing: 'border-box',\n            padding: '4px',\n            border: \n                \\`$\\{isSelected ? '1px solid blue' : 'none'}\\`\n          }}\n        >\n          {day.getDate()}\n        </div>\n      )\n    }\n  }\n  return (<Calendar renderDay={customRender}/>)\n}\n        `}\n        </code>\n      </div>\n      <h2>Mobile</h2>\n      <div class='example-wrapper'>\n        <code>\n          {`\nimport React from 'react'\nimport Calendar from 'rc-big-calendar'\n\nconst App = () => <Calendar isMobile />\n        `}\n        </code>\n        <div class='calendar-wrapper-2'>\n          <Calendar isMobile />\n        </div>\n      </div>\n      <div class='footer'></div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}