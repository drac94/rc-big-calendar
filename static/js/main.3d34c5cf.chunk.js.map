{"version":3,"sources":["../../src/index.styled.js","../../src/index.js","App.js","index.js"],"names":["Header","styled","DayNamesWrapper","DayName","DaysWrapper","props","Day","DayNumberWrapper","DayNumber","selected","currentDayColor","console","css","selectedStyles","DayBody","NavButtonLeft","NavButtonRight","Month","Container","breakpoint","mobileBreakpoint","headerDateFormat","enabledDayDateFormat","disabledDayDateFormat","today","useState","monthStart","startOfMonth","monthEnd","endOfMonth","startDate","startOfWeek","endDate","endOfWeek","Days","renderDay","days","day","dayNumber","isWithinRange","format","key","isSameDay","addDays","rows","Math","differenceInDays","DayNames","index","monthChangeCallback","currentMonth","onMonthChange","onClick","setCurrentMonth","subMonths","previousButton","addMonths","nextButton","App","className","ReactDOM","render","document","getElementById"],"mappings":"wlFAYaA,EAASC,IAAH,gBAQNC,EAAkBD,IAAH,gBAOfE,EAAUF,IAAH,gBASPG,EAAcH,IAAH,gBAKnBI,YAAD,2CAAyCA,EALtC,KAKH,wBAGSC,EAAML,IAAH,gBAMHM,EAAmBN,IAAH,gBAOhBO,EAAYP,IAAH,gBAYjBI,YAAD,OAnE0B,SAACI,EAAUC,GAEvC,GADAC,eACA,EACE,OAAOC,YAAP,WAEgBF,GAFhB,WAgEWG,CAAeR,EAAD,SAAiBA,EAZvC,oBAeMS,EAAUb,IAAH,gBAIPc,EAAgBd,IAAH,gBAMbe,EAAiBf,IAAH,gBAMdgB,EAAQhB,IAAH,gBAWLiB,EAAYjB,IAAH,gBAOjBI,YAAD,yDACqCA,EAAMc,WAD3C,6CAGIf,EAHJ,yFAQIF,EARJ,6DAYII,EAZJ,yFAiBEU,EAjBF,yDAqBEC,EArBF,gIA4BEjB,EA5BF,2E,EC5EcK,YAAU,IACpB,EAAN,EAAM,YAAN,EAAM,iBAAN,EAAM,aAAN,EAAM,cADoB,EAC1B,EAKEe,wBANwB,MACpB,IADoB,IAC1B,EAMEC,wBAPwB,MACpB,YADoB,IAC1B,EAOEC,4BARwB,MACpB,IADoB,IAC1B,EAQEC,6BATwB,MACpB,QADoB,EAUxBb,EATF,EASEA,gBAEIc,EAAQ,IAAd,KAZ0B,EAacC,mBAAS,IAAjD,MAb0B,mBAapB,EAboB,KAapB,EAboB,KAepBC,EAAaC,uBAAnB,GACMC,EAAWC,qBAAjB,GACMC,EAAYC,sBAAlB,GACMC,EAAUC,oBAAhB,GAEMC,EAAO,SAAC,GAIZ,IAJ8B,IAAhBC,EAAgB,EAAhBA,UACRC,EAAN,GACIC,EAAJ,EAEOA,GAAP,GAAuB,CACrB,IAAMC,EAAYC,wBAAcF,EAAKX,EAAnBa,GACdC,iBAAOH,EADOE,GAEdC,iBAAOH,EAFX,GAGAD,OACE,qBAAKK,IAAKJ,GACR,yBACE,qBACE5B,SAAUiC,oBAAUL,EADtB,GAEE3B,gBAAiBA,GAJvB,IASGyB,GAAa,yBAAUA,EAAUE,EAAKP,EAV3CM,MAaAC,EAAMM,kBAAQN,EAAdA,GAEF,IAAMO,EAAOC,UAAUC,2BAAiBd,EAAjBc,GAAvB,GACA,OAAO,qBAAaF,KAAMA,GAA1B,IAGIG,EAAW,WAEf,OACE,yBAFW,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAjD,OAGK,KAAS,qBACR,qBAASN,IAAKO,GAHpB,QAmBIC,EAAuBC,YAC3BC,EAAcD,EAAcpB,EAA5BqB,IAGF,OACE,qBAAWhC,WAAYC,GACrB,yBACE,qBAAegC,QAAS,kBAX5BC,EAAgBC,oBAAUJ,EAA1BG,SACAF,GAAiBF,EAAoBK,oBAAUJ,EAA/CC,OAWOI,GAFL,KAIE,qBAAgBH,QAAS,kBAnB7BC,EAAgBG,oBAAUN,EAA1BG,SACAF,GAAiBF,EAAoBO,oBAAUN,EAA/CC,OAmBOM,GALL,KAOE,yBAAQjB,iBAAOU,EARnB,KAUE,oBAVF,MAWE,qBAAMf,UAAWA,MCrGRuB,G,OARH,WACV,OACE,yBAAKC,UAAU,YACb,kBAAC,EAAD,SCFNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.3d34c5cf.chunk.js","sourcesContent":["import styled, { css } from 'styled-components'\n\nexport const selectedStyles = (selected, currentDayColor) => {\n  console.log(currentDayColor)\n  if (selected)\n    return css`\n      color: #fff;\n      background: ${currentDayColor || '#1a73e8'};\n      border-radius: 50%;\n    `\n}\n\nexport const Header = styled.div`\n  display: grid;\n  grid-template-columns: 48px 48px auto;\n  align-items: center;\n  padding-left: 16px;\n  padding-right: 16px;\n`\n\nexport const DayNamesWrapper = styled.div`\n  display: grid;\n  width: 100%;\n  grid-template-columns: repeat(7, 1fr);\n  border-top: #dadce0 1px solid;\n`\n\nexport const DayName = styled.div`\n  color: #70757a;\n  font-size: 11px;\n  font-weight: 500;\n  line-height: 20px;\n  text-align: center;\n  border-right: #dadce0 1px solid;\n`\n\nexport const DaysWrapper = styled.div`\n  display: grid;\n  width: 100%;\n  height: 100%;\n  grid-template-columns: repeat(7, minmax(0, 1fr));\n  ${(props) => `grid-template-rows: repeat(${props.rows}, minmax(0, 1fr))`};\n`\n\nexport const Day = styled.div`\n  border-right: #dadce0 1px solid;\n  border-bottom: #dadce0 1px solid;\n  overflow: hidden;\n`\n\nexport const DayNumberWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 36px;\n`\n\nexport const DayNumber = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 12px;\n  font-weight: 500;\n  letter-spacing: 0.3px;\n  white-space: nowrap;\n  color: #70757a;\n  line-height: 16px;\n  min-height: 24px;\n  min-width: 24px;\n  ${(props) => selectedStyles(props.selected, props.currentDayColor)};\n`\n\nexport const DayBody = styled.div`\n  height: calc(100% - 40px);\n`\n\nexport const NavButtonLeft = styled.div`\n  padding: 4px;\n  cursor: pointer;\n  grid-column: 1;\n`\n\nexport const NavButtonRight = styled.div`\n  padding: 4px;\n  cursor: pointer;\n  grid-column: 2;\n`\n\nexport const Month = styled.div`\n  color: #3c4043;\n  font-size: 22px;\n  font-weight: 400;\n  letter-spacing: 0;\n  line-height: 28px;\n  white-space: nowrap;\n  margin-left: 24px;\n  grid-column: 3;\n`\n\nexport const Container = styled.div`\n  display: grid;\n  width: 100%;\n  height: 100%;\n  grid-template-rows: 60px 20px minmax(0, 1fr);\n  border-left: #dadce0 1px solid;\n\n  ${(props) => `\n    @media only screen and (max-width: ${props.breakpoint}px) {\n      height: auto;\n      ${DaysWrapper} {\n        display: flex;\n        flex-direction: column;\n      }\n\n      ${DayNamesWrapper} {\n        visibility: hidden;\n      }\n\n      ${Day} {\n        overflow: initial;\n        min-height: 60px;\n      }\n    \n    ${NavButtonRight} {\n        grid-column: 3;\n    }\n    \n    ${Month} {\n        grid-column: 2;\n        grid-row: 1;\n        text-align: center;\n        margin: 0;\n    }\n    \n    ${Header} {\n        grid-template-columns: 48px auto 48px;\n    }\n    \n  }`}\n`\n","import React, { useState } from 'react'\nimport {\n  addDays,\n  addMonths,\n  subMonths,\n  isWithinRange,\n  format,\n  isSameDay,\n  differenceInDays,\n  startOfMonth,\n  endOfMonth,\n  startOfWeek,\n  endOfWeek\n} from 'date-fns'\n\nimport {\n  Container,\n  Header,\n  DaysWrapper,\n  Day,\n  DayNamesWrapper,\n  DayName,\n  DayNumber,\n  DayNumberWrapper,\n  DayBody,\n  NavButtonLeft,\n  NavButtonRight,\n  Month\n} from './index.styled'\n\nconst Calendar = (props) => {\n  const {\n    renderDay,\n    previousButton,\n    nextButton,\n    onMonthChange,\n    mobileBreakpoint = 900,\n    headerDateFormat = 'MMMM YYYY',\n    enabledDayDateFormat = 'D',\n    disabledDayDateFormat = 'MMM D',\n    currentDayColor\n  } = props\n  const today = new Date()\n  const [currentMonth, setCurrentMonth] = useState(new Date())\n\n  const monthStart = startOfMonth(currentMonth)\n  const monthEnd = endOfMonth(monthStart)\n  const startDate = startOfWeek(monthStart)\n  const endDate = endOfWeek(monthEnd)\n\n  const Days = ({ renderDay }) => {\n    const days = []\n    let day = startDate\n\n    while (day <= endDate) {\n      const dayNumber = isWithinRange(day, monthStart, monthEnd)\n        ? format(day, enabledDayDateFormat)\n        : format(day, disabledDayDateFormat)\n      days.push(\n        <Day key={day}>\n          <DayNumberWrapper>\n            <DayNumber\n              selected={isSameDay(day, today)}\n              currentDayColor={currentDayColor}\n            >\n              {dayNumber}\n            </DayNumber>\n          </DayNumberWrapper>\n          {renderDay && <DayBody>{renderDay(day, startDate, endDate)}</DayBody>}\n        </Day>\n      )\n      day = addDays(day, 1)\n    }\n    const rows = Math.ceil(differenceInDays(endDate, startDate) / 7)\n    return <DaysWrapper rows={rows}>{days}</DaysWrapper>\n  }\n\n  const DayNames = () => {\n    const days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']\n    return (\n      <DayNamesWrapper>\n        {days.map((value, index) => (\n          <DayName key={index}>{value}</DayName>\n        ))}\n      </DayNamesWrapper>\n    )\n  }\n\n  const nextMonth = () => {\n    setCurrentMonth(addMonths(currentMonth, 1))\n    onMonthChange && monthChangeCallback(addMonths(currentMonth, 1))\n  }\n\n  const prevMonth = () => {\n    setCurrentMonth(subMonths(currentMonth, 1))\n    onMonthChange && monthChangeCallback(subMonths(currentMonth, 1))\n  }\n\n  const monthChangeCallback = (currentMonth) => {\n    onMonthChange(currentMonth, startDate, endDate)\n  }\n\n  return (\n    <Container breakpoint={mobileBreakpoint}>\n      <Header>\n        <NavButtonLeft onClick={() => prevMonth()}>\n          {previousButton || '<'}\n        </NavButtonLeft>\n        <NavButtonRight onClick={() => nextMonth()}>\n          {nextButton || '>'}\n        </NavButtonRight>\n        <Month>{format(currentMonth, headerDateFormat)}</Month>\n      </Header>\n      <DayNames />\n      <Days renderDay={renderDay} />\n    </Container>\n  )\n}\n\nexport default Calendar\n","import React from 'react'\n\nimport Calendar from 'rc-big-calendar'\nimport 'rc-big-calendar/dist/index.css'\n\nconst App = () => {\n  return (\n    <div className='app-main'>\n      <Calendar />\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}